/* The following code was generated by JFlex 1.4.3 on 11/28/15 1:56 PM */

import java_cup.runtime.*;

//Returned when reserved words, operators, or anything that we only care about what they are with no context are encountered
class CSXToken
{
	int linenum;
	int colnum;

	CSXToken()
	{

	}

	CSXToken(int line,int col)
	{
		linenum = line;
		colnum = col;
	}

	CSXToken(Position p)
	{
		linenum = p.linenum;
		colnum = p.colnum;

	}

}

//Returned when integer literals are encountered so that we can display the intValue in P2
class CSXIntLitToken extends CSXToken
{
	int intValue;
	CSXIntLitToken(int val, Position p)
	{
		super(p);
		intValue=val;
	}
}

//Returned when float literals are encountered so that we can display the floatValue in P2
class CSXFloatLitToken extends CSXToken
{
	float floatValue;
	CSXFloatLitToken(float floatValue, Position p)
	{
		super(p);
		this.floatValue = floatValue;
	}
}

//Returned when indentifier tokens are encountered so that we can display the name of the identifier in P2
class CSXIdentifierToken extends CSXToken
{
	String identifierValue;
	CSXIdentifierToken(String identifierValue, Position p)
	{
		super(p);
		this.identifierValue = identifierValue;
	}

}

//Returned when character literal are encountered so that we can display the charValue in P2
//This may look odd when displayed in the case of escaped characters, as we display them as is
class CSXCharLitToken extends CSXToken
{
	char charValue;
	CSXCharLitToken(char charValue, Position p)
	{
		super(p);
		this.charValue = charValue;
	}
}

//Returned when string literal are encountered so that we can display the stringValue in P2
class CSXStringLitToken extends CSXToken
{
	String stringValue;
	CSXStringLitToken(String stringValue, Position p)
	{
		super(p);
		this.stringValue = stringValue;
	}
}

//Returned when any errors are encountered so that we can display the error message in P2
class CSXErrorToken extends CSXToken
{
	String error;
	CSXErrorToken(String error, Position p)
	{
		super(p);
		this.error = error;
	}
}

// This class is used to track line and column numbers
// Feel free to change to extend it
class Position
{
	int  linenum; 			/* maintain this as line number current token was scanned on */
	int  colnum; 			/* maintain this as column number current token began at */
	int  line; 				/* maintain this as line number after scanning current token  */
	int  col; 				/* maintain this as column number after scanning current token  */
	Position()
	{
		linenum = 1;
		colnum = 1;
		line = 1;
		col = 1;
	}
	void setpos()
	{ // set starting position for current token
		linenum = line;
		colnum = col;
	}
} ;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/28/15 1:56 PM from the specification file
 * <tt>F:/dev/Java/TypeChecker/src/csx.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FoundIdentifierMatch = 4;
  public static final int FoundIdentifier = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\3\2\0\1\4\22\0\1\66\1\47\1\6\1\1"+
    "\2\11\1\43\1\41\1\62\1\63\1\52\1\50\1\55\1\51\1\65"+
    "\1\2\12\5\1\54\1\53\1\45\1\44\1\46\2\11\1\17\1\26"+
    "\1\27\1\36\1\25\1\14\1\12\1\23\1\24\1\12\1\40\1\15"+
    "\1\12\1\31\1\16\1\37\1\12\1\34\1\33\1\21\1\32\1\35"+
    "\1\22\2\12\1\12\1\60\1\7\1\61\1\11\1\13\1\11\1\17"+
    "\1\26\1\27\1\36\1\25\1\14\1\12\1\23\1\24\1\12\1\40"+
    "\1\15\1\12\1\30\1\16\1\37\1\12\1\10\1\33\1\20\1\32"+
    "\1\35\1\22\3\12\1\56\1\42\1\57\1\64\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\1\1\4\1\5\2\6"+
    "\1\1\11\6\1\7\2\1\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\1\1\30\1\31\1\14"+
    "\1\15\1\32\1\0\1\33\1\34\1\35\1\36\1\5"+
    "\1\6\1\0\1\34\5\6\1\37\12\6\1\7\1\0"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\4\1\0\1\50\1\51\1\0\1\33\2\34\2\5"+
    "\2\6\1\34\1\6\1\52\3\6\1\53\11\6\1\7"+
    "\1\0\1\54\13\55\13\56\1\57\1\34\1\5\1\36"+
    "\1\60\3\6\1\61\1\6\1\62\2\6\1\63\3\6"+
    "\1\64\1\65\1\6\6\55\1\66\12\55\6\56\1\67"+
    "\12\56\1\57\1\6\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\6\1\76\1\77\13\55\13\56\1\100\1\6"+
    "\5\55\5\56\1\6\2\55\2\56\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\250\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\u0690\0\u06c8\0\250\0\250\0\u0700\0\u0738\0\u0770"+
    "\0\u07a8\0\u07e0\0\u0818\0\u06c8\0\250\0\u0850\0\u0888\0\u0268"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0230\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\u0cb0\0\u0ce8\0\u0d20\0\u06c8\0\u0cb0\0\u0ce8\0\u0d58"+
    "\0\250\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\u0f18\0\u0230\0\u0f50\0\u0f88\0\u0fc0\0\u0230\0\u0ff8\0\u1030"+
    "\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0"+
    "\0\u1228\0\250\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378"+
    "\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538"+
    "\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8"+
    "\0\u1730\0\u1768\0\u17a0\0\u17a0\0\u0230\0\u17d8\0\u1810\0\u1848"+
    "\0\u0230\0\u1880\0\u0230\0\u18b8\0\u18f0\0\u0230\0\u1928\0\u1960"+
    "\0\u1998\0\u0230\0\u0230\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0"+
    "\0\u1ae8\0\u1b20\0\u1298\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38"+
    "\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8"+
    "\0\u1e30\0\u1e68\0\u1ea0\0\u1500\0\u1ed8\0\u1f10\0\u1f48\0\u1f80"+
    "\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\250\0\u2108"+
    "\0\u0230\0\u0230\0\u0230\0\u0230\0\u0230\0\u0230\0\u2140\0\u0230"+
    "\0\u0230\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8"+
    "\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488"+
    "\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u0230"+
    "\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0"+
    "\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990"+
    "\0\u0230";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\4\1\14\1\15\1\16\3\14\2\17\1\20"+
    "\1\14\1\21\1\22\1\23\1\24\4\14\1\13\1\25"+
    "\1\14\1\26\1\14\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\4\1\13\1\4\1\14\1\15\1\16\3\14"+
    "\2\17\1\20\1\14\1\21\1\22\1\23\1\24\4\14"+
    "\1\13\1\25\1\14\1\26\1\14\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\56\1\57\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\10\0\1\60\1\0\1\60"+
    "\1\0\25\60\120\0\1\61\70\0\1\62\70\0\1\7"+
    "\71\0\1\11\2\0\1\63\1\0\1\63\1\0\25\63"+
    "\24\0\1\64\3\0\2\12\2\0\1\12\1\65\1\66"+
    "\57\12\6\0\1\14\2\0\1\14\1\0\13\14\1\67"+
    "\13\14\34\0\1\14\2\0\1\14\1\0\27\14\34\0"+
    "\1\70\2\0\1\71\1\0\1\71\1\0\25\71\34\0"+
    "\1\14\2\0\1\14\1\0\3\14\1\72\1\73\1\74"+
    "\21\14\34\0\1\14\2\0\1\75\1\0\22\14\1\75"+
    "\4\14\34\0\1\14\2\0\1\14\1\0\11\14\1\76"+
    "\15\14\34\0\1\14\2\0\1\14\1\0\2\14\1\77"+
    "\13\14\2\100\7\14\34\0\1\14\2\0\1\14\1\0"+
    "\3\14\1\101\12\14\2\102\7\14\34\0\1\14\2\0"+
    "\1\103\1\0\4\14\1\104\15\14\1\103\4\14\34\0"+
    "\1\14\2\0\1\14\1\0\3\14\1\105\1\106\4\14"+
    "\1\107\15\14\34\0\1\14\2\0\1\14\1\0\4\14"+
    "\1\110\22\14\34\0\1\14\2\0\1\111\1\0\22\14"+
    "\1\111\4\14\30\0\2\112\2\0\2\112\1\113\31\112"+
    "\1\0\25\112\43\0\1\114\70\0\1\115\70\0\1\116"+
    "\67\0\1\117\67\0\1\120\67\0\1\121\73\0\1\122"+
    "\70\0\1\123\23\0\1\124\57\0\1\125\7\0\1\64"+
    "\132\0\1\126\70\0\1\127\23\0\1\60\2\0\1\60"+
    "\1\0\27\60\27\0\1\61\1\130\66\61\3\62\1\131"+
    "\64\62\5\0\1\132\2\0\1\63\1\0\1\63\1\133"+
    "\25\63\30\0\2\134\2\0\1\134\3\135\7\134\1\135"+
    "\7\134\1\135\36\134\6\0\1\14\2\0\1\14\1\0"+
    "\5\14\1\136\2\137\17\14\34\0\1\140\2\0\1\71"+
    "\1\0\1\71\1\140\25\71\34\0\1\14\2\0\1\14"+
    "\1\0\4\14\1\141\22\14\34\0\1\14\2\0\1\142"+
    "\1\0\22\14\1\142\4\14\34\0\1\14\2\0\1\14"+
    "\1\0\3\14\1\143\23\14\34\0\1\14\2\0\1\14"+
    "\1\0\20\14\1\144\6\14\34\0\1\14\2\0\1\14"+
    "\1\0\12\14\1\145\14\14\34\0\1\14\2\0\1\14"+
    "\1\0\6\14\2\146\17\14\34\0\1\14\2\0\1\14"+
    "\1\0\21\14\1\147\5\14\34\0\1\14\2\0\1\14"+
    "\1\0\24\14\1\150\2\14\34\0\1\14\2\0\1\14"+
    "\1\0\13\14\1\151\13\14\34\0\1\14\2\0\1\14"+
    "\1\0\4\14\1\152\22\14\34\0\1\14\2\0\1\14"+
    "\1\0\5\14\1\153\21\14\34\0\1\14\2\0\1\14"+
    "\1\0\16\14\2\154\7\14\34\0\1\14\2\0\1\14"+
    "\1\0\5\14\1\155\21\14\34\0\1\14\2\0\1\14"+
    "\1\0\12\14\1\156\14\14\34\0\1\14\2\0\1\14"+
    "\1\0\12\14\1\157\14\14\30\0\2\160\2\0\2\160"+
    "\1\161\31\160\1\162\25\160\7\0\3\112\7\0\1\112"+
    "\7\0\1\112\10\0\1\112\36\0\1\163\1\0\1\164"+
    "\1\0\1\165\3\164\2\166\1\167\1\164\1\170\1\171"+
    "\1\172\1\173\4\164\1\163\1\174\1\164\1\175\1\164"+
    "\37\0\1\176\1\0\1\177\1\0\1\200\3\177\2\201"+
    "\1\202\1\177\1\203\1\204\1\205\1\206\4\177\1\176"+
    "\1\207\1\177\1\210\1\177\34\0\1\124\57\0\1\64"+
    "\2\0\1\61\1\211\66\61\5\0\1\132\2\0\1\63"+
    "\1\0\1\63\1\212\25\63\34\0\1\132\5\0\1\212"+
    "\55\0\2\134\2\0\1\134\1\0\1\213\57\134\2\0"+
    "\2\12\2\0\1\12\1\214\1\66\1\135\7\12\1\135"+
    "\7\12\1\135\36\12\6\0\1\14\2\0\1\14\1\0"+
    "\24\14\1\215\2\14\34\0\1\14\2\0\1\14\1\0"+
    "\20\14\1\216\6\14\34\0\1\140\2\0\1\71\1\0"+
    "\1\71\1\212\25\71\34\0\1\14\2\0\1\14\1\0"+
    "\5\14\1\217\21\14\34\0\1\14\2\0\1\14\1\0"+
    "\21\14\1\220\5\14\34\0\1\14\2\0\1\14\1\0"+
    "\13\14\1\221\13\14\34\0\1\14\2\0\1\14\1\0"+
    "\3\14\1\222\23\14\34\0\1\14\2\0\1\14\1\0"+
    "\13\14\1\223\13\14\34\0\1\14\2\0\1\14\1\0"+
    "\12\14\1\224\14\14\34\0\1\14\2\0\1\14\1\0"+
    "\5\14\1\225\21\14\34\0\1\14\2\0\1\14\1\0"+
    "\3\14\1\226\23\14\34\0\1\14\2\0\1\14\1\0"+
    "\21\14\1\227\5\14\34\0\1\14\2\0\1\14\1\0"+
    "\6\14\2\230\11\14\1\231\5\14\34\0\1\14\2\0"+
    "\1\232\1\0\22\14\1\232\4\14\34\0\1\14\2\0"+
    "\1\14\1\0\24\14\1\233\2\14\34\0\1\14\2\0"+
    "\1\14\1\0\16\14\2\234\7\14\30\0\2\160\2\0"+
    "\2\160\1\161\31\160\1\0\25\160\7\0\3\160\7\0"+
    "\1\160\7\0\1\160\10\0\1\160\33\0\1\164\2\0"+
    "\1\164\1\0\13\164\1\235\13\164\34\0\1\164\2\0"+
    "\1\164\1\0\27\164\34\0\1\164\2\0\1\164\1\0"+
    "\3\164\1\236\1\237\1\240\21\164\34\0\1\164\2\0"+
    "\1\241\1\0\22\164\1\241\4\164\34\0\1\164\2\0"+
    "\1\164\1\0\11\164\1\242\15\164\34\0\1\164\2\0"+
    "\1\164\1\0\2\164\1\243\13\164\2\244\7\164\34\0"+
    "\1\164\2\0\1\164\1\0\3\164\1\245\12\164\2\246"+
    "\7\164\34\0\1\164\2\0\1\247\1\0\4\164\1\250"+
    "\15\164\1\247\4\164\34\0\1\164\2\0\1\164\1\0"+
    "\3\164\1\251\1\252\4\164\1\253\15\164\34\0\1\164"+
    "\2\0\1\164\1\0\4\164\1\254\22\164\34\0\1\164"+
    "\2\0\1\255\1\0\22\164\1\255\4\164\34\0\1\177"+
    "\2\0\1\177\1\0\13\177\1\256\13\177\34\0\1\177"+
    "\2\0\1\177\1\0\27\177\34\0\1\177\2\0\1\177"+
    "\1\0\3\177\1\257\1\260\1\261\21\177\34\0\1\177"+
    "\2\0\1\262\1\0\22\177\1\262\4\177\34\0\1\177"+
    "\2\0\1\177\1\0\11\177\1\263\15\177\34\0\1\177"+
    "\2\0\1\177\1\0\2\177\1\264\13\177\2\265\7\177"+
    "\34\0\1\177\2\0\1\177\1\0\3\177\1\266\12\177"+
    "\2\267\7\177\34\0\1\177\2\0\1\270\1\0\4\177"+
    "\1\271\15\177\1\270\4\177\34\0\1\177\2\0\1\177"+
    "\1\0\3\177\1\272\1\273\4\177\1\274\15\177\34\0"+
    "\1\177\2\0\1\177\1\0\4\177\1\275\22\177\34\0"+
    "\1\177\2\0\1\276\1\0\22\177\1\276\4\177\30\0"+
    "\1\277\73\0\1\212\5\0\1\212\55\0\2\134\2\0"+
    "\1\134\3\213\7\134\1\213\7\134\1\213\36\134\6\0"+
    "\1\14\2\0\1\300\1\0\22\14\1\300\4\14\34\0"+
    "\1\14\2\0\1\14\1\0\6\14\2\301\17\14\34\0"+
    "\1\14\2\0\1\14\1\0\13\14\1\302\13\14\34\0"+
    "\1\14\2\0\1\14\1\0\13\14\1\303\13\14\34\0"+
    "\1\14\2\0\1\14\1\0\2\14\1\304\24\14\34\0"+
    "\1\14\2\0\1\14\1\0\26\14\1\305\34\0\1\14"+
    "\2\0\1\14\1\0\21\14\1\306\5\14\34\0\1\14"+
    "\2\0\1\14\1\0\12\14\1\307\14\14\34\0\1\14"+
    "\2\0\1\14\1\0\6\14\2\310\17\14\34\0\1\14"+
    "\2\0\1\14\1\0\6\14\2\311\17\14\34\0\1\164"+
    "\2\0\1\164\1\0\5\164\1\312\2\313\17\164\34\0"+
    "\1\164\2\0\1\164\1\0\4\164\1\314\22\164\34\0"+
    "\1\164\2\0\1\243\1\0\22\164\1\243\4\164\34\0"+
    "\1\164\2\0\1\164\1\0\3\164\1\245\23\164\34\0"+
    "\1\164\2\0\1\164\1\0\20\164\1\315\6\164\34\0"+
    "\1\164\2\0\1\164\1\0\12\164\1\316\14\164\34\0"+
    "\1\164\2\0\1\164\1\0\6\164\2\243\17\164\34\0"+
    "\1\164\2\0\1\164\1\0\21\164\1\315\5\164\34\0"+
    "\1\164\2\0\1\164\1\0\24\164\1\317\2\164\34\0"+
    "\1\164\2\0\1\164\1\0\13\164\1\320\13\164\34\0"+
    "\1\164\2\0\1\164\1\0\4\164\1\321\22\164\34\0"+
    "\1\164\2\0\1\164\1\0\5\164\1\322\21\164\34\0"+
    "\1\164\2\0\1\164\1\0\16\164\2\323\7\164\34\0"+
    "\1\164\2\0\1\164\1\0\5\164\1\237\21\164\34\0"+
    "\1\164\2\0\1\164\1\0\12\164\1\312\14\164\34\0"+
    "\1\164\2\0\1\164\1\0\12\164\1\324\14\164\34\0"+
    "\1\177\2\0\1\177\1\0\5\177\1\325\2\326\17\177"+
    "\34\0\1\177\2\0\1\177\1\0\4\177\1\327\22\177"+
    "\34\0\1\177\2\0\1\264\1\0\22\177\1\264\4\177"+
    "\34\0\1\177\2\0\1\177\1\0\3\177\1\266\23\177"+
    "\34\0\1\177\2\0\1\177\1\0\20\177\1\330\6\177"+
    "\34\0\1\177\2\0\1\177\1\0\12\177\1\331\14\177"+
    "\34\0\1\177\2\0\1\177\1\0\6\177\2\264\17\177"+
    "\34\0\1\177\2\0\1\177\1\0\21\177\1\330\5\177"+
    "\34\0\1\177\2\0\1\177\1\0\24\177\1\332\2\177"+
    "\34\0\1\177\2\0\1\177\1\0\13\177\1\333\13\177"+
    "\34\0\1\177\2\0\1\177\1\0\4\177\1\334\22\177"+
    "\34\0\1\177\2\0\1\177\1\0\5\177\1\335\21\177"+
    "\34\0\1\177\2\0\1\177\1\0\16\177\2\336\7\177"+
    "\34\0\1\177\2\0\1\177\1\0\5\177\1\260\21\177"+
    "\34\0\1\177\2\0\1\177\1\0\12\177\1\325\14\177"+
    "\34\0\1\177\2\0\1\177\1\0\12\177\1\337\14\177"+
    "\34\0\1\14\2\0\1\14\1\0\16\14\2\340\7\14"+
    "\34\0\1\14\2\0\1\14\1\0\16\14\2\341\7\14"+
    "\34\0\1\164\2\0\1\164\1\0\24\164\1\243\2\164"+
    "\34\0\1\164\2\0\1\164\1\0\20\164\1\342\6\164"+
    "\34\0\1\164\2\0\1\164\1\0\5\164\1\244\21\164"+
    "\34\0\1\164\2\0\1\164\1\0\13\164\1\243\13\164"+
    "\34\0\1\164\2\0\1\164\1\0\3\164\1\315\23\164"+
    "\34\0\1\164\2\0\1\164\1\0\12\164\1\343\14\164"+
    "\34\0\1\164\2\0\1\164\1\0\5\164\1\344\21\164"+
    "\34\0\1\164\2\0\1\164\1\0\3\164\1\243\23\164"+
    "\34\0\1\164\2\0\1\164\1\0\21\164\1\345\5\164"+
    "\34\0\1\164\2\0\1\164\1\0\6\164\2\346\11\164"+
    "\1\244\5\164\34\0\1\164\2\0\1\164\1\0\16\164"+
    "\2\244\7\164\34\0\1\177\2\0\1\177\1\0\24\177"+
    "\1\264\2\177\34\0\1\177\2\0\1\177\1\0\20\177"+
    "\1\347\6\177\34\0\1\177\2\0\1\177\1\0\5\177"+
    "\1\265\21\177\34\0\1\177\2\0\1\177\1\0\13\177"+
    "\1\264\13\177\34\0\1\177\2\0\1\177\1\0\3\177"+
    "\1\330\23\177\34\0\1\177\2\0\1\177\1\0\12\177"+
    "\1\350\14\177\34\0\1\177\2\0\1\177\1\0\5\177"+
    "\1\351\21\177\34\0\1\177\2\0\1\177\1\0\3\177"+
    "\1\264\23\177\34\0\1\177\2\0\1\177\1\0\21\177"+
    "\1\352\5\177\34\0\1\177\2\0\1\177\1\0\6\177"+
    "\2\353\11\177\1\265\5\177\34\0\1\177\2\0\1\177"+
    "\1\0\16\177\2\265\7\177\34\0\1\14\2\0\1\14"+
    "\1\0\20\14\1\354\6\14\34\0\1\164\2\0\1\355"+
    "\1\0\22\164\1\355\4\164\34\0\1\164\2\0\1\164"+
    "\1\0\2\164\1\243\24\164\34\0\1\164\2\0\1\164"+
    "\1\0\26\164\1\243\34\0\1\164\2\0\1\164\1\0"+
    "\21\164\1\243\5\164\34\0\1\164\2\0\1\164\1\0"+
    "\12\164\1\356\14\164\34\0\1\177\2\0\1\357\1\0"+
    "\22\177\1\357\4\177\34\0\1\177\2\0\1\177\1\0"+
    "\2\177\1\264\24\177\34\0\1\177\2\0\1\177\1\0"+
    "\26\177\1\264\34\0\1\177\2\0\1\177\1\0\21\177"+
    "\1\264\5\177\34\0\1\177\2\0\1\177\1\0\12\177"+
    "\1\360\14\177\34\0\1\14\2\0\1\14\1\0\13\14"+
    "\1\361\13\14\34\0\1\164\2\0\1\164\1\0\16\164"+
    "\2\243\7\164\34\0\1\164\2\0\1\164\1\0\16\164"+
    "\2\241\7\164\34\0\1\177\2\0\1\177\1\0\16\177"+
    "\2\264\7\177\34\0\1\177\2\0\1\177\1\0\16\177"+
    "\2\262\7\177\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10696];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\30\1\12\11\2\1\2\11"+
    "\3\1\1\0\3\1\1\11\2\1\1\0\22\1\1\0"+
    "\6\11\3\1\1\0\2\1\1\0\1\11\27\1\1\0"+
    "\1\11\114\1\1\11\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
Position Pos = new Position();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 58: 
          { //Reserved word WHILE, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_WHILE,
			new CSXToken(Pos));
          }
        case 66: break;
        case 28: 
          { //When an identifier is not caught by the identifier rule above, but it is by this rule, then it must be close
	//to an identifier, but start with a number or underscore
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
	new CSXErrorToken("Found invalid Identifier: " + yytext(), Pos));
          }
        case 67: break;
        case 3: 
          { //Newline non-printable character including \n and \r\n
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.line += 1;
	Pos.col = 1;
          }
        case 68: break;
        case 32: 
          { // Match || (boolean or) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COR,
			new CSXToken(Pos));
          }
        case 69: break;
        case 41: 
          { // Duplicate approach as ++, see ++ for details
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.DEC, new CSXToken(Pos));
          }
        case 70: break;
        case 21: 
          { // Match on ] (closed bracket)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RBRACKET, new CSXToken(Pos));
          }
        case 71: break;
        case 57: 
          { //Reserved word FALSE, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FALSE,
			new CSXToken(Pos));
          }
        case 72: break;
        case 27: 
          { // Match on a single line comment, does not include the newline so no need to increment the row
	yybegin(YYINITIAL);
	String comment = yytext();
    //System.out.println("Line Comment: " + comment);
    Pos.setpos();
    Pos.col += comment.length();
    Pos.line ++;
          }
        case 73: break;
        case 23: 
          { // Match on ) (close parentheses)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RPAREN, new CSXToken(Pos));
          }
        case 74: break;
        case 44: 
          { // Match any character literal
	yybegin(YYINITIAL);
	Pos.setpos();
	String charString = yytext();
	Pos.col += charString.length();

	//Find any escaped characters and parse them
	char parsedChar;
	switch(charString)
	{
		case "'\\n'":
			parsedChar = '\n';
			break;
		case "'\\r'":
			parsedChar = '\r';
			break;
		case "'\\t'":
			parsedChar = '\t';
			break;
		case "'\\\\'":
			parsedChar = '\\';
			break;
		case "'\\''":
			parsedChar = '\'';
			break;
		default:
			//If not an escaped character, just return the one character between the single quotes
			parsedChar = charString.charAt(1);
			break;
	}
	
	return new Symbol(sym.CHARLIT,
			new CSXCharLitToken(parsedChar, Pos));
          }
        case 75: break;
        case 65: 
          { //Reserved word CONTINUE, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CONTINUE,
			new CSXToken(Pos));
          }
        case 76: break;
        case 52: 
          { //Reserved word CHAR, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CHAR,
			new CSXToken(Pos));
          }
        case 77: break;
        case 22: 
          { // Match on ( (open parentheses)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LPAREN, new CSXToken(Pos));
          }
        case 78: break;
        case 42: 
          { //Reserved word FOR, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FOR,
			new CSXToken(Pos));
          }
        case 79: break;
        case 59: 
          { //Reserved word ENDIF, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_ENDIF,
			new CSXToken(Pos));
          }
        case 80: break;
        case 60: 
          { //Reserved word BREAK, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_BREAK,
			new CSXToken(Pos));
          }
        case 81: break;
        case 1: 
          { //Catch anything not caught by any rules above except for EOF and return an error
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found invalid token: " + yytext(), Pos));
          }
        case 82: break;
        case 7: 
          { // Match any runaway character literals
	yybegin(YYINITIAL);
	Pos.setpos();
	
	//Get text, increase column to length of text
	//Rule does not include newline, so no line increment
	String parsed = yytext();
	Pos.col += parsed.length();
	return new Symbol(sym.error,
			new CSXErrorToken("Runaway character found: " + parsed, Pos));
          }
        case 83: break;
        case 30: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.STRLIT,
			new CSXStringLitToken(yytext(), Pos));
          }
        case 84: break;
        case 11: 
          { // Match on ! (boolean not) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.NOT, new CSXToken(Pos));
          }
        case 85: break;
        case 56: 
          { //Reserved word FLOAT, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_FLOAT,
			new CSXToken(Pos));
          }
        case 86: break;
        case 34: 
          { // Match == (equality comparison) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.EQ,
			new CSXToken(Pos));
          }
        case 87: break;
        case 18: 
          { // Match on { (begin scope) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LBRACE, new CSXToken(Pos));
          }
        case 88: break;
        case 5: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	
	//Any runaway strings will not contain the newline, so no need to increment line.
	String parsed = yytext();
	Pos.col += parsed.length();
	return new Symbol(sym.error,
			new CSXErrorToken("Runaway string found: " + parsed, Pos));
          }
        case 89: break;
        case 46: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { // Duplicate approach as ++, see ++ for details
	yybegin(FoundIdentifierMatch);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.DEC, new CSXToken(Pos));
          }
        case 90: break;
        case 6: 
          { //When we encounter an identifier with this rule, it means we didn't find any increment or decrement
	//operators before it, so we will enter a state so that we don't error if one follows immediately after
	yybegin(FoundIdentifier);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.IDENTIFIER,
			new CSXIdentifierToken(yytext(), Pos));
          }
        case 91: break;
        case 9: 
          { // Match on < (less than) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LT, new CSXToken(Pos));
          }
        case 92: break;
        case 14: 
          { // Match on * (multiplication) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.TIMES, new CSXToken(Pos));
          }
        case 93: break;
        case 20: 
          { // Match on [ (open bracket)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LBRACKET, new CSXToken(Pos));
          }
        case 94: break;
        case 13: 
          { // Match on - (subtraction) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.MINUS, new CSXToken(Pos));
          }
        case 95: break;
        case 47: 
          { // Match on a block comment that can span multiple lines or just a single line
	yybegin(YYINITIAL);
	Pos.setpos();
	
	// Parse all the scanned text for any newline characters, if found increment the line and reset the column
	// If we don't find one, just increment the column
    int rowsSkipped = 0;
    String parseString = yytext();
	for(int i = 0; i < parseString.length(); i++)
	{
		Pos.col++;
		if(parseString.charAt(i) == '\n')
		{
			Pos.col=1;
			Pos.line++;
		}
	}
	
	//Print out the comment for debug purposes
    //System.out.println("Block Comment: " + parseString);
          }
        case 96: break;
        case 45: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { //If we find an increment, and we lookahead and find an identifier, go into an exclusive state to indicate that we found 
	//an identifier ahead and we don't want to match the regular identifier rule and be put into "FoundIdentifier" state
	yybegin(FoundIdentifierMatch);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.INC, new CSXToken(Pos));
          }
        case 97: break;
        case 35: 
          { // Match <= (less than or equal to) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.LEQ, new CSXToken(Pos));
          }
        case 98: break;
        case 62: 
          { //Reserved word CONST, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CONST,
			new CSXToken(Pos));
          }
        case 99: break;
        case 53: 
          { //Reserved word VOID, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_VOID,
			new CSXToken(Pos));
          }
        case 100: break;
        case 12: 
          { // Match on + (addition) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.PLUS, new CSXToken(Pos));
          }
        case 101: break;
        case 36: 
          { // Match >= (greater than or equal to) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.GEQ, new CSXToken(Pos));
          }
        case 102: break;
        case 19: 
          { // Match on } (close scope) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.RBRACE, new CSXToken(Pos));
          }
        case 103: break;
        case 50: 
          { //Reserved word ELSE, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_ELSE,
			new CSXToken(Pos));
          }
        case 104: break;
        case 43: 
          { //Reserved word INT, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_INT,
			new CSXToken(Pos));
          }
        case 105: break;
        case 2: 
          { // Match on / (slash)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.SLASH, new CSXToken(Pos));
          }
        case 106: break;
        case 26: 
          { //If we found an identifier match already 
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();

	return new Symbol(sym.IDENTIFIER,
			new CSXIdentifierToken(yytext(), Pos));
          }
        case 107: break;
        case 17: 
          { // Match on , (comma/seperator)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COMMA, new CSXToken(Pos));
          }
        case 108: break;
        case 55: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { // Duplicate approach as ++, see ++ for details
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word after \"--\" operator without a matching identifier", Pos));
          }
        case 109: break;
        case 39: 
          { // Duplicate approach as ++, see ++ for details
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Could not find matching identifier for \"--\" operator", Pos));
          }
        case 110: break;
        case 38: 
          { //If we find an increment any states to differentiate its context, such as a look ahead or that we
	//found an identifier before it, then fail because it doesn't have a matching identifier
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Could not find matching identifier for \"++\" operator", Pos));
          }
        case 111: break;
        case 10: 
          { // Match on > (greater than) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.GT, new CSXToken(Pos));
          }
        case 112: break;
        case 24: 
          { //Space character
	Pos.setpos();
	yybegin(YYINITIAL);
	Pos.col += 1;
          }
        case 113: break;
        case 49: 
          { //Reserved word TRUE, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_TRUE,
			new CSXToken(Pos));
          }
        case 114: break;
        case 40: 
          { //If we find an identifier without a paired increment or decrement, go into the FoundIdentifier state
	//so that we know we found an identifier that is eligible for a pair if one of those operators is scanned next
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.INC, new CSXToken(Pos));
          }
        case 115: break;
        case 64: 
          { //Reserved word RETURN, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_RETURN,
			new CSXToken(Pos));
          }
        case 116: break;
        case 48: 
          { //Reserved word READ, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_READ,
			new CSXToken(Pos));
          }
        case 117: break;
        case 31: 
          { //Reserved word IF, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_IF,
			new CSXToken(Pos));
          }
        case 118: break;
        case 61: 
          { //Reserved word CLASS, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_CLASS,
			new CSXToken(Pos));
          }
        case 119: break;
        case 37: 
          { // Match != (not equal) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.NOTEQ, new CSXToken(Pos));
          }
        case 120: break;
        case 63: 
          { //Reserved word PRINT, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_PRINT,
			new CSXToken(Pos));
          }
        case 121: break;
        case 8: 
          { // Match on = (assignment) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.ASG, new CSXToken(Pos));
          }
        case 122: break;
        case 15: 
          { // Match on ; (semicolon/statement termination)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.SEMI, new CSXToken(Pos));
          }
        case 123: break;
        case 25: 
          { //Tab non-printable character
	Pos.setpos();
    yybegin(YYINITIAL);
    Pos.col += 1;
          }
        case 124: break;
        case 16: 
          { // Match on : (colon/seperator)
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.COLON, new CSXToken(Pos));
          }
        case 125: break;
        case 4: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	
	String parsedString = yytext();
	Pos.col += parsedString.length();
	
	//Same idea as float, replace tilde with java recognizable negation symbol
	parsedString = parsedString.replace('~', '-');

	try{
		//If Integer.parseInt() throws a number format exception, because our rule only finds
		//a valid integer format, the exception must be due to an overflow error.
		//If not, return an INTLITToken with that integer as the value
		return new Symbol(sym.INTLIT,
				new CSXIntLitToken(Integer.parseInt(parsedString), Pos));

	} catch (NumberFormatException e) {
		
		//Print the error and return an IntLitToken with Integer.MAX_VALUE as the value
		System.out.println("Overflow Error");
		System.out.println(e.getMessage());

		return new Symbol(sym.INTLIT,
				new CSXIntLitToken(Integer.MAX_VALUE, Pos));
	}
          }
        case 126: break;
        case 29: 
          { yybegin(YYINITIAL);
	Pos.setpos();
	String parsedString = yytext();
	Pos.col += parsedString.length();
	
	//If a tilde was found in parse string, this is supposed to be a negative number.
	//Replace the tilde with a java recognizable symbol for negation
	parsedString = parsedString.replace('~', '-');
	
	//Float.Parse() will return back negative or positive infinity on overflow
    float parsedFloat = Float.parseFloat(parsedString);
    if(parsedFloat == Float.NEGATIVE_INFINITY || parsedFloat == Float.POSITIVE_INFINITY)
    {
		//Print error, but return Float.MAX_VALUE
		System.out.println("Float Overflow Error");

		return new Symbol(sym.FLOATLIT,
				new CSXFloatLitToken(Float.MAX_VALUE, Pos));
    }
    else
    {
    	//No overflow? Return a FloatLitToken with the parsed float as the value
		return new Symbol(sym.FLOATLIT,
			new CSXFloatLitToken(parsedFloat, Pos));
	}
          }
        case 127: break;
        case 33: 
          { // Match && (boolean and) operator
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.CAND,
			new CSXToken(Pos));
          }
        case 128: break;
        case 54: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { //If we find an increment, and we look ahead and find a reserved word, return an error token so that we don't mistake
	//the reserved word as an identifier in the rule below
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.error,
			new CSXErrorToken("Found reserved word after \"++\" operator without a matching identifier", Pos));
          }
        case 129: break;
        case 51: 
          { //Reserved word BOOL, case insensitive
	yybegin(YYINITIAL);
	Pos.setpos();
	Pos.col += yytext().length();
	return new Symbol(sym.rw_BOOL,
			new CSXToken(Pos));
          }
        case 130: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	//When jFlex see the EOF token, return back an EOF token so we can stop scanning
	return new Symbol(sym.EOF, new CSXToken(0,0));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
